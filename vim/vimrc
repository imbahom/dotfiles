if exists("$QUICK_COCOS2DX_ROOT")
    let &tags=$QUICK_COCOS2DX_ROOT."/lib/cocos2d-x/tags"
    set tags+=./tags;

    " let s:quickTagPath = $QUICK_COCOS2DX_ROOT."lib/cocos2d-x/tags"
    " set tags=$QUICK_COCOS2DX_ROOT."lib/cocos2d-x/tags",~/.vimtags
    " set tags=~/.vimtags,s:quickTagPath
    " set tags=s:quickTagPath

    " tag test here
    " CCSprite test1
endif

set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
" let g:vundle_default_git_proto = "git"

Bundle 'imbahom/widget.vim'
Bundle 'imbahom/quickX'

Bundle 'vimwiki/vimwiki'
" Bundle 'vim-pandoc/vim-pandoc'
" Bundle 'vim-pandoc/vim-pandoc-syntax'

Bundle 'xolox/vim-misc'
"-----------------
" Shell
" ----------------
" Bundle 'Shougo/vimshell.vim'
" Bundle 'Shougo/vimproc'
" Bundle 'vim-scripts/Conque-Shell'
"------------------
" Code Completions
"------------------
Bundle 'honza/vim-snippets'
" Bundle 'ervandew/supertab'
"Bundle 'snipmate-snippets'
Bundle 'Raimondi/delimitMate'
"------ snipmate dependencies -------
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle "garbas/vim-snipmate"


"-----------------
" Fast navigation
"-----------------
Bundle 'Lokaltog/vim-easymotion'
" Bundle 'xolox/vim-easytags'

"--------------
" Fast editing
"--------------
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/nerdcommenter'
" Bundle 'sjl/gundo.vim'
Bundle 'godlygeek/tabular'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle "VisIncr"
" Bundle 'terryma/vim-multiple-cursors'

"--------------
" IDE features
"--------------
Bundle 'scrooloose/nerdtree'
Bundle 'majutsushi/tagbar'
Bundle 'mileszs/ack.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'scrooloose/syntastic'
Bundle 'bling/vim-airline'

"-------------
" Other Utils
"-------------
" Bundle 'humiaozuzu/fcitx-status'
" Bundle 'nvie/vim-togglemouse'
" Bundle 'addCppClass'

"----------------------------------------
" Syntax/Indent for language enhancement
"------- markup language -------
Bundle 'tpope/vim-markdown'
" Bundle 'timcharper/textile.vim'

"------- Ruby --------
" Bundle 'tpope/vim-endwise'

"------- Lua --------
" Bundle 'xolox/vim-lua-inspect'


"------- Go ----------
"Bundle 'jnwhiteh/vim-golang'
Bundle 'dgryski/vim-godef'
Bundle 'cespare/vim-golang'
" Bundle 'fatih/vim-go'
Bundle 'Blackrush/vim-gocode'

"------- FPs ------
" Bundle 'kien/rainbow_parentheses.vim'
" Bundle 'wlangstroth/vim-racket'
" Bundle 'vim-scripts/VimClojure'
" Bundle 'rosstimson/scala-vim-support'

"--------------
" Color Schemes
"--------------
Bundle 'rickharris/vim-blackboard'
Bundle 'altercation/vim-colors-solarized'
Bundle 'rickharris/vim-monokai'
Bundle 'tpope/vim-vividchalk'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'chriskempson/vim-tomorrow-theme'
Bundle 'fisadev/fisa-vim-colorscheme'

" enable filetype dectection and ft specific plugin/indent
filetype plugin indent on     " required!
filetype plugin on
" enable syntax hightlight and completion
syntax on

let mapleader=","

set helplang=cn
" encoding dectection
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set encoding=utf-8

"--------
" Vim UI
"--------
"color scheme
set t_Co=256
set background=dark
colorscheme Tomorrow-Night-Eighties
" colorscheme solarized
let g:airline_theme="powerlineish"

" search
set incsearch
set hlsearch
"set highlight 	" conflict with highlight current line
set ignorecase
set smartcase

" editor settings
set history=1000
" set nofoldenable                                                  " disable folding"
set confirm                                                       " prompt when existing from an unsaved file
set backspace=indent,eol,start                                    " More powerful backspacing
set t_Co=256                                                      " Explicitly tell vim that the terminal has 256 colors "
if has("gui_running")
    set mouse=a                                                       " use mouse in all modes
    set go=aAce  " remove toolbar
    set transparency=0
    set guifont=Monaco:h18
    set showtabline=2
    "maximum window size
    set columns=999
    set lines=999
    " highlight current line
    au WinLeave * set nocursorline nocursorcolumn
    au WinEnter * set cursorline cursorcolumn
    set cursorline cursorcolumn
endif
set report=0                                                      " always report number of lines changed                "
set nowrap                                                        " dont wrap lines
set scrolloff=0                                                   " 5 lines above/below cursor when scrolling
" set showbreak=>\
" set cpoptions+=n
" make screen more clear and i prefer to use easy motion instead
" set number                                                        " show line numbers
set showmatch                                                     " show matching bracket (briefly jump)
set showcmd                                                       " show typed command in status bar
" set title                                                         " show file in titlebar
set laststatus=2                                                  " use 2 lines for the status bar
set matchtime=2                                                   " show matching bracket for 0.2 seconds
" set matchpairs+=<:>                                               " specially for html

set relativenumber

" Default Indentation
set autoindent
set smartindent     " indent when
set tabstop=4       " tab width
set softtabstop=4   " backspace
set shiftwidth=4    " indent width
" set textwidth=79
" set smarttab
set expandtab       " expand tab to space
set backupskip=/tmp/*,/private/tmp/*

"窗口改变时等分窗口大小
au VimResized * exe "normal! \<c-w>="

autocmd FileType php setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType c setlocal omnifunc=ccomplete#Complete

" autocmd BufWritePre *.go :Fmt

" syntax support
autocmd Syntax javascript set syntax=jquery   " JQuery syntax support
" js
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

"-----------------
" Plugin settings
"-----------------
" Rainbow parentheses for Lisp and variants
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
let g:rbpt_max = 16
autocmd Syntax lisp,scheme,clojure,racket RainbowParenthesesToggle

" easy-motion
let g:EasyMotion_leader_key = '<Leader>'

" Tagbar
let g:tagbar_left=1
let g:tagbar_width=60
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
" tag for coffee
if executable('coffeetags')
    let g:tagbar_type_coffee = {
                \ 'ctagsbin' : 'coffeetags',
                \ 'ctagsargs' : '',
                \ 'kinds' : [
                \ 'f:functions',
                \ 'o:object',
                \ ],
                \ 'sro' : ".",
                \ 'kind2scope' : {
                \ 'f' : 'object',
                \ 'o' : 'object',
                \ }
                \ }

    let g:tagbar_type_markdown = {
                \ 'ctagstype' : 'markdown',
                \ 'sort' : 0,
                \ 'kinds' : [
                \ 'h:sections'
                \ ]
                \ }
endif

let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }

" Nerd Tree
let NERDChristmasTree=0
let NERDTreeWinSize=60
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos = "right"

" nerdcommenter
let NERDSpaceDelims=1
let NERDCompactSexyComs=1

set completeopt-=preview

" snippet
" let g:snipMate = {}
" let g:snipMate.scope_aliases = {}
" let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'
" let g:snipMate.scope_aliases['lua'] = 'lua'

" SuperTab
" let g:SuperTabDefultCompletionType='context'
let g:SuperTabDefaultCompletionType = '<C-X><C-U>'
let g:SuperTabRetainCompletionType=2

" ctrlp
set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo,*.class,.DS_Store  " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
" use regex mode as default
let g:ctrlp_regexp = 1
" search in buffers as default
let g:ctrlp_cmd = 'CtrlPBuffer'

" vimwiki
let g:vimwiki_list = [{'path':'~/vimwiki/',
            \ 'path_html': '~/vimwiki/www/',
            \ 'template_path': '~/vimwiki/template/',
            \ 'template_default': 'default.tpl',
            \ 'css_name': 'static/css/bootstrap.css',
            \ 'nested': {'python': 'python', 'c++': 'cpp'},
            \ 'ext': '.wiki'}]

" pandoc to html
" let g:vimwiki_list = [{'path': '~/vimwiki/',
" \ 'path_html': '~/vimwiki_html/',
" \ 'template_path': '~/vimwiki/template/',
" \ 'template_default': 'default.tpl',
" \ 'css_name': 'static/css/bootstrap.css',
" \ 'syntax': 'markdown',
" \ 'ext': '.md',
" \ 'custom_wiki2html': '~/pandoc.sh'}]

" \ 'template_ext': '.tpl',

"默认情况下，VimWiki会为驼峰形式的单词，标记为新wiki页面。可以关闭这个选项
let g:vimwiki_camel_case = 0
" 自定义的HTML页面
" 如果生成HTML的目录下有手工hack的html文件，也会被无情的删除，可以通过 g:vimwiki_user_htmls 选项配置用户html文件，不被自动删除。
let g:vimwiki_user_htmls = 'contack.html,'
" 配置多个VimWiki项目
" let g:vimwiki_list = [{'path':'~/vimwiki/'}, {'path':'~/pwiki'}]



"------------------
" Useful Functions
"------------------
" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
            \ if ! exists("g:leave_my_cursor_position_alone") |
            \     if line("'\"") > 0 && line ("'\"") <= line("$") |
            \         exe "normal g'\"" |
            \     endif |
            \ endif

" w!! to sudo & write a file
cmap w!! w !sudo tee >/dev/null %

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" eggcache vim
nnoremap ; :
:command! W w
:command! WQ wq
:command! Wq wq
:command! Q q
:command! Qa qa
:command! QA qa


noremap <S-Left> :tabprevious<CR>
noremap <S-Right> :tabnext<CR>

" Unmap K, which normally pulls up the man(1) page for a given binary or
" function; I don't find this terribly helpful in most filetypes and often hit
" it accidentally
nnoremap K <nop>
vnoremap K <nop>

" Change and delete with C and D both cut off the remainder of the line from
" the cursor, but Y yanks the whole line, which is inconsistent (and can be
" done with yy anyway); this fixes it so it only yanks the rest of the line
noremap Y y$

" dont use vim's insane regex rule, instead use python style
" 使用 "\v" 会使得其后的模式中所有 '0'-'9'，'a'-'z'，'A'-'Z' 和 '_' 之外的字符都
" 当作特殊字符解释。"very magic"
" 使用 "\V" 会使得其后的模式中只有反斜杠有特殊的意义。"very nomagic"
nnoremap / /\v
vnoremap / /\v
" 确保查找在屏幕中
nnoremap n nzzzv
nnoremap N Nzzzv

"terminal like control
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

"fold
nnoremap <space> za
vnoremap <space> za


" Keybindings for plugin toggle
nmap <F8> :TagbarToggle<cr>
nmap <F6> :NERDTreeToggle<cr>
" nmap <F3> :GundoToggle<cr>
nmap <F4> :IndentGuidesToggle<cr>
" nnoremap <leader>a :Ack
nnoremap <leader>a :Ack <c-r>=expand("<cword>")<CR>
nnoremap <leader>v V`]
